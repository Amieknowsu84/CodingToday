/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    void swap(ListNode t1,ListNode t2){
        
        int temp=t1.val;
        t1.val=t2.val;
        t2.val=temp;
    
    }
    
    ListNode insert(ListNode head,ListNode sortedTill,ListNode toInsert){
        
        if(head==null)
            return head;
        
        ListNode currHead=head,end=sortedTill;
        
        //move the currHead till the value is less than or equal to  toInsert
        while(currHead.val<=toInsert.val){
            currHead=currHead.next;
        }
    
        if(currHead==head){
            toInsert.next=head;
            head=toInsert;
            return head;
        }
        
        //now since we are here 
        //it means that the currentHead is pointing to that loaction where we want to insert
        swap(currHead,toInsert);
        toInsert.next=currHead.next;
        currHead.next=toInsert;
        
        
        return head;
        
        
    }
    
    public ListNode insertionSortList(ListNode head) {
      
        if(head.next==null)
            return head;
        
        ListNode curr=head.next;
        ListNode prev=head;
        
        while(curr!=null){
            
            if(curr.val<prev.val){
                prev.next=curr.next;
                head=insert(head,prev,curr);
                curr=prev.next;
            }
            else
            {
                prev=prev.next;
                curr=curr.next;
            }
            
        }
        
        return head;

    }
    
}